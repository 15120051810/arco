# Generated by Django 5.0.7 on 2024-08-04 18:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Api',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='API名称')),
                ('abs_path', models.CharField(help_text='绝对路径，不包括域名', max_length=255, verbose_name='绝对路径')),
                ('order_index', models.IntegerField(default=1000, verbose_name='排序')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='users.api', verbose_name='父路径')),
            ],
            options={
                'verbose_name': 'API管理',
                'verbose_name_plural': 'API管理',
                'ordering': ('order_index',),
                'permissions': (('view_api', '查看API'), ('add_api', '增加API'), ('change_api', '编辑API'), ('delete_api', '删除API')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='ChannelShop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_shop_id', models.CharField(max_length=228, null=True, unique=True, verbose_name='渠道店铺ID')),
                ('name', models.CharField(blank=True, max_length=228, verbose_name='渠道店铺名称')),
                ('type', models.IntegerField(blank=True, choices=[(1, '渠道'), (2, '店铺')], null=True, verbose_name='渠道或者店铺类型')),
                ('order_index', models.IntegerField(default=1000, verbose_name='序号')),
                ('state', models.SmallIntegerField(blank=True, choices=[(0, '禁用'), (1, '正常')], default=1, null=True, verbose_name='状态')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='users.channelshop', to_field='channel_shop_id', verbose_name='渠道店铺名称')),
            ],
            options={
                'verbose_name': '渠道店铺管理',
                'verbose_name_plural': '渠道店铺管理',
            },
        ),
        migrations.CreateModel(
            name='DepartmentalProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departmental_project_id', models.CharField(max_length=228, null=True, unique=True, verbose_name='部门或项目ID')),
                ('name', models.CharField(blank=True, max_length=228, verbose_name='名称')),
                ('type', models.IntegerField(blank=True, choices=[(1, '部门'), (2, '项目')], null=True, verbose_name='部门或项目')),
                ('order_index', models.IntegerField(default=1000, verbose_name='序号')),
                ('state', models.SmallIntegerField(blank=True, choices=[(0, '禁用'), (1, '正常')], default=1, null=True, verbose_name='状态')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='users.departmentalproject', to_field='departmental_project_id', verbose_name='父')),
            ],
            options={
                'verbose_name': '部门项目',
                'verbose_name_plural': '部门项目',
            },
        ),
        migrations.CreateModel(
            name='MedicalWorkerDP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departmental_project_id', models.CharField(max_length=228, null=True, unique=True, verbose_name='部门或项目ID')),
                ('name', models.CharField(blank=True, max_length=228, verbose_name='名称')),
                ('type', models.IntegerField(blank=True, choices=[(1, '部门'), (2, '项目')], null=True, verbose_name='部门或项目')),
                ('order_index', models.IntegerField(default=1000, verbose_name='序号')),
                ('state', models.SmallIntegerField(blank=True, choices=[(0, '禁用'), (1, '正常')], default=1, null=True, verbose_name='状态')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='users.medicalworkerdp', to_field='departmental_project_id', verbose_name='父')),
            ],
            options={
                'verbose_name': ' 圆心医工部门项目',
                'verbose_name_plural': ' 圆心医工部门项目',
            },
        ),
        migrations.CreateModel(
            name='Org',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('org_id', models.CharField(max_length=228, null=True, unique=True, verbose_name='组织ID')),
                ('org_name', models.CharField(blank=True, max_length=228, verbose_name='组织名称')),
                ('org_type', models.IntegerField(blank=True, choices=[(1, '大区'), (2, '省份'), (3, '城市'), (4, '片区'), (5, '电商'), (6, '门店'), (7, '作废闭店机构'), (8, '其他'), (9, '连锁总部')], null=True, verbose_name='组织类型')),
                ('org_code', models.CharField(max_length=228, verbose_name='组织编码')),
                ('order_index', models.IntegerField(default=1000, verbose_name='序号')),
                ('state', models.SmallIntegerField(blank=True, choices=[(0, '禁用'), (1, '正常')], default=1, null=True, verbose_name='状态')),
                ('is_ds', models.SmallIntegerField(blank=True, choices=[(0, '否'), (1, '是')], default=0, null=True, verbose_name='是否是电商')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='users.org', to_field='org_id', verbose_name='父组织')),
            ],
            options={
                'verbose_name': '组织管理',
                'verbose_name_plural': '组织管理',
                'ordering': ('order_index',),
                'permissions': (('view_org', '查看组织'), ('add_org', '添加组织'), ('change_org', '编辑组织'), ('delete_org', '删除组织')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Router',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='用来拼接path', max_length=100, null=True, verbose_name='路由唯一名称')),
                ('title', models.CharField(help_text='显示的菜单名称', max_length=255, verbose_name='菜单名称')),
                ('locale_title', models.CharField(blank=True, help_text='前端需要的双语配置', max_length=100, null=True, verbose_name='前端需要的双语配置')),
                ('component', models.CharField(blank=True, max_length=100, null=True, verbose_name='组件名称')),
                ('redirect', models.CharField(blank=True, max_length=150, null=True, verbose_name='跳转路径')),
                ('icon', models.CharField(blank=True, max_length=60, null=True, verbose_name='菜单图标')),
                ('show', models.BooleanField(default=True, verbose_name='是否显示菜单')),
                ('order_index', models.IntegerField(default=1000, verbose_name='排序')),
                ('type', models.SmallIntegerField(choices=[(0, '目录'), (1, '页面'), (2, '按钮')], default=0, verbose_name='类型')),
                ('system', models.SmallIntegerField(choices=[(0, 'PC端'), (1, '移动端')], default=0, verbose_name='系统')),
                ('keyword', models.CharField(blank=True, max_length=228, null=True, verbose_name='权限关键字')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('apis', models.ManyToManyField(blank=True, related_name='routers', to='users.api', verbose_name='API接口')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='users.router', verbose_name='父路由')),
            ],
            options={
                'verbose_name': '菜单管理',
                'verbose_name_plural': '菜单管理',
                'ordering': ('order_index',),
                'permissions': (('view_router', '查看菜单'), ('add_router', '增加菜单'), ('change_router', '编辑菜单'), ('delete_router', '删除菜单')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='角色名称')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('routers', models.ManyToManyField(blank=True, help_text='左侧菜单，用来控制显示还是不显示', related_name='roles', to='users.router', verbose_name='菜单')),
            ],
            options={
                'verbose_name': '角色管理',
                'verbose_name_plural': '角色管理',
                'permissions': (('view_role', '查看角色'), ('add_role', '添加角色'), ('change_role', '编辑角色'), ('delete_role', '删除角色')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='姓名')),
                ('email', models.EmailField(blank=True, max_length=128, null=True, verbose_name='邮箱地址')),
                ('staff_code', models.CharField(blank=True, max_length=128, null=True, verbose_name='工号')),
                ('mobile', models.CharField(blank=True, max_length=128, null=True, verbose_name='手机号')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('channel_shop', models.ManyToManyField(blank=True, related_name='channel_shop', to='users.channelshop', verbose_name='渠道店铺')),
                ('departmental_project', models.ManyToManyField(blank=True, related_name='departmental_project', to='users.departmentalproject', verbose_name='部门项目')),
                ('medical_worker_dp', models.ManyToManyField(blank=True, related_name='medical_worker_dp', to='users.medicalworkerdp', verbose_name='医工部门项目')),
                ('orgs', models.ManyToManyField(blank=True, related_name='users', to='users.org', verbose_name='组织')),
                ('roles', models.ManyToManyField(blank=True, related_name='role_users', to='users.role', verbose_name='角色')),
                ('home_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.router', verbose_name='首页')),
            ],
            options={
                'verbose_name': '用户管理',
                'verbose_name_plural': '用户管理',
                'permissions': (('view_user', '查看用户'), ('add_user', '添加用户'), ('change_user', '编辑用户'), ('delete_user', '删除用户')),
                'default_permissions': (),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='channelshop',
            index=models.Index(fields=['name'], name='users_chann_name_ddc8c2_idx'),
        ),
        migrations.AddIndex(
            model_name='departmentalproject',
            index=models.Index(fields=['name'], name='users_depar_name_5c46b0_idx'),
        ),
        migrations.AddIndex(
            model_name='medicalworkerdp',
            index=models.Index(fields=['name'], name='users_medic_name_fdc1a5_idx'),
        ),
        migrations.AddIndex(
            model_name='org',
            index=models.Index(fields=['org_name'], name='users_org_org_nam_9384ff_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['name'], name='users_user_name_7f8296_idx'),
        ),
    ]
