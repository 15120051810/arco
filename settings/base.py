"""
Django settings for arco project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import sys
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

LOG_DIR = os.path.abspath(os.path.join(BASE_DIR, 'logs'))

if not os.path.exists(LOG_DIR):
    os.mkdir(LOG_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8h8xdz$__20nht@k#=w5i-z#!81is3rbx5_unc)2k^^jo96^ww'

# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',  # 需要注册应用，

    'corsheaders',
    # 三方APP
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',

    # 用户自定义
    "apps.users",
    "apps.system_manage",
    "apps.download_center",
    "apps.log",
    "apps.arco_demo"
]

AUTH_USER_MODEL = 'users.User'
# CORS_ALLOW_ALL_ORIGINS = True # 这将允许来自任何源的请求，测试环境可以打开，但在生产环境中应该禁用。

# 允许携带 Cookie
CORS_ALLOW_CREDENTIALS = True

# 不允许所有域名访问，明确指定允许的前端地址
CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:6888",  # 你的前端开发服务器地址
    "https://example.com",  # 你的生产环境地址
]

from corsheaders.defaults import default_headers

# 允许发送的自定义请求头（大小写敏感！）没跑通
CORS_ALLOW_HEADERS = list(default_headers) + [
    "basetoken",         # 你自定义的 header
    # "authorization",     # 如果你用 JWT 的话，必须加这个, 已经存在于default_headers了
]

# 请求 按列表顺序执行每个中间件的 __call__ → process_request、process_view
# 响应 按相反顺序执行每个中间件的 process_response
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 后端解决跨域 跨域放在中间件第一个 !!注释钓的话就不用解决跨域问题了
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 如果有其他依赖于用户身份验证的中间件，它们应该在你的自定义中间件之后执行
    'middlemares.token_middleware.CheckTokenMiddleware',  # 添加中间件
    'middlemares.log_middleware.ThreadLocalMiddleware',  # 线程日志过滤器

]

ROOT_URLCONF = 'arco.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'arco.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True
USE_TZ = False

# propagate = True：
# 日志会传递给 父 logger，如果父 logger 有 handler，会再输出一遍日志。
#
# propagate = False：
# 日志 只会在当前 logger 指定的 handler 中输出，不会继续向上层传播。

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    'loggers': {
        'arco': {
            'handlers': ['console', 'file'],
            'propagate': True,
            'level': 'DEBUG',  # 日志级别
        },
        # 'django.db.backends': {
        #     'handlers': ['console', 'file'],  # 数据库的 日志记录
        #     'level': 'DEBUG',  # 日志级别
        #     'propagate': False,
        # },
        'middleware': {
            'handlers': ['console', 'middleware_file'],
            'propagate': True,
            'level': 'INFO',
        },
        'refresh': {
            'handlers': ['console', 'refresh_file'],
            'propagate': True,
            'level': 'INFO',
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            # "formatter": "verbose",
            "formatter": "color",  # 选中带颜色的
            'filters': ['add_username_ip'],
            # 'encoding': 'utf-8'  # 确保编码为 UTF-8
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/log.log"),
            'when': 'MIDNIGHT',
            'backupCount': 10,
            'formatter': 'verbose',
            'filters': ['add_username_ip'],
        },
        'middleware_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/middleware.log"),
            'when': 'MIDNIGHT',
            'backupCount': 10,
            'formatter': 'verbose',
            'filters': ['add_username_ip'],
        },
        'refresh_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/refresh.log"),
            'when': 'MIDNIGHT',
            'backupCount': 10,
            'formatter': 'verbose',
            'filters': ['add_username_ip'],
        }
    },
    'filters': {
        'add_username_ip': {
            '()': 'libs.logging_filters.UsernameIpLoggingFilter',
        },
    },
    "formatters": {
        "verbose": {
            "format": "%(username)s %(ip)s %(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s "
        },
        # 带颜色的
        "color": {
            '()': 'colorlog.ColoredFormatter',
            'format': '%(log_color)s [%(asctime)s] [%(levelname)s] %(username)s %(message)s',
            'log_colors': {
                'DEBUG': 'blue',
                'INFO': 'green',
                'WARNING': 'yellow',
                'ERROR': 'red',
                'CRITICAL': 'bold_red',
            },
            'style': '%',
        },
        # 'standard': {
        #     'format': '{"time": "%(asctime)s", "level": "%(levelname)s", "method": "%(method)s", "username": "%(username)s", "sip": "%(sip)s", "dip": "%(dip)s", "path": "%(path)s", "status_code": "%(status_code)s", "reason_phrase": "%(reason_phrase)s", "func": "%(module)s.%(funcName)s:%(lineno)d",  "message": "%(message)s"}',
        #     'datefmt': '%Y-%m-%d %H:%M:%S'
        # }
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static_files'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.ModelBackend',
# ]

# 配置DRF
REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'libs.exceptions.exception_handler',  # 自定义全局捕获异常

    "DEFAULT_AUTHENTICATION_CLASSES": (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # 使用rest_framework_simplejwt验证身份
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication'
    ),

    # 2.权限配置（全局）： 顺序靠上的严格（根据不同的用户角色，可以操作不同的表）
    "DEFAULT_PERMISSION_CLASSES": (
        # 'rest_framework.permissions.IsAdminUser', # 管理员可以访问
        'rest_framework.permissions.IsAuthenticated',  # 认证用户可以访问  默认
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # 认证用户可以访问, 否则只能读取
        # 'rest_framework.permissions.AllowAny',  # 所有用户都可以访问
        # Use Django's standard `django.contrib.auth` permissions,or allow read-only access for unauthenticated users.
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema',

    # 过滤后端设置
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),

    # 使用该类构造响应对象时
    # 'DEFAULT_RENDERER_CLASSES': (  # 默认响应渲染类
    #     'rest_framework.renderers.JSONRenderer',  # json渲染器
    #     'rest_framework.renderers.BrowsableAPIRenderer',  # 浏览API渲染器
    # )

}

## 顶层机构名称
TOP_ORG_NAME = '圆心科技'

BASE_KEYWORD = "arco"
USER_DEFAULT_PASSWORD = 'Miao13456'

############# 配置simpleJwt


# 使用的是 双Token

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(seconds=20),  # access 有效 1 小时
    "REFRESH_TOKEN_LIFETIME": timedelta(minutes=1),  # refresh 有效 7 天
    "ROTATE_REFRESH_TOKENS": False,  # 是否每次刷新都换新的 refresh（建议设为 False）
    # 当设置为 时True，如果将刷新令牌提交给 TokenRefreshView，则将返回新的刷新令牌以及新的访问令牌。此新刷新令牌将通过 JSON 响应中的“refresh”键提供。

    "AUTH_HEADER_TYPES": ("Bearer",),  # 请求头要包含Bearer
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  # 请求头要包含 Authorization

    # 当设置为 时True，auth_user 表中的 last_login 字段会在登录时更新（TokenObtainPairView）。
    "UPDATE_LAST_LOGIN": True,

    "BLACKLIST_AFTER_ROTATION": True,  # 是否把旧 refresh 加黑名单（只有前者为 True 时有效）

    # 默认的 认证登录返回的序列化数据
    # "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",

    # 自定义 认证登录返回的序列化数据 # https://django-rest-framework-simplejwt.readthedocs.io/en/latest/customizing_token_claims.html
    "TOKEN_OBTAIN_SERIALIZER": "libs.auth.MyTokenObtainPairSerializer",

    # 刷新token
    'TOKEN_REFRESH_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenRefreshSerializer',

    # 验证token
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",

}

# 使用滑动 Token

# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=10),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
#     'ROTATE_REFRESH_TOKENS': True,
#     'BLACKLIST_AFTER_ROTATION': True,
#     'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.SlidingToken',),
#     'TOKEN_TYPE_CLAIM': 'sliding',
# }
